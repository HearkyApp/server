// Code generated by MockGen. DO NOT EDIT.
// Source: D:\upmeet.app\server\pkg\domain\meetup.go

// Package mock_domain is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/UpMeetApp/server/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMeetupService is a mock of MeetupService interface.
type MockMeetupService struct {
	ctrl     *gomock.Controller
	recorder *MockMeetupServiceMockRecorder
}

// MockMeetupServiceMockRecorder is the mock recorder for MockMeetupService.
type MockMeetupServiceMockRecorder struct {
	mock *MockMeetupService
}

// NewMockMeetupService creates a new mock instance.
func NewMockMeetupService(ctrl *gomock.Controller) *MockMeetupService {
	mock := &MockMeetupService{ctrl: ctrl}
	mock.recorder = &MockMeetupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeetupService) EXPECT() *MockMeetupServiceMockRecorder {
	return m.recorder
}

// CreateMeetup mocks base method.
func (m *MockMeetupService) CreateMeetup(uid string, dto *domain.CreateMeetupDTO) (*domain.Meetup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeetup", uid, dto)
	ret0, _ := ret[0].(*domain.Meetup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeetup indicates an expected call of CreateMeetup.
func (mr *MockMeetupServiceMockRecorder) CreateMeetup(uid, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeetup", reflect.TypeOf((*MockMeetupService)(nil).CreateMeetup), uid, dto)
}

// DeleteMeetup mocks base method.
func (m *MockMeetupService) DeleteMeetup(uid, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeetup", uid, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeetup indicates an expected call of DeleteMeetup.
func (mr *MockMeetupServiceMockRecorder) DeleteMeetup(uid, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeetup", reflect.TypeOf((*MockMeetupService)(nil).DeleteMeetup), uid, id)
}

// GetMeetupByID mocks base method.
func (m *MockMeetupService) GetMeetupByID(uid, id string) (*domain.Meetup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeetupByID", uid, id)
	ret0, _ := ret[0].(*domain.Meetup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeetupByID indicates an expected call of GetMeetupByID.
func (mr *MockMeetupServiceMockRecorder) GetMeetupByID(uid, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeetupByID", reflect.TypeOf((*MockMeetupService)(nil).GetMeetupByID), uid, id)
}

// UpdateMeetup mocks base method.
func (m *MockMeetupService) UpdateMeetup(uid string, dto *domain.UpdateMeetupDTO) (*domain.Meetup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeetup", uid, dto)
	ret0, _ := ret[0].(*domain.Meetup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeetup indicates an expected call of UpdateMeetup.
func (mr *MockMeetupServiceMockRecorder) UpdateMeetup(uid, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeetup", reflect.TypeOf((*MockMeetupService)(nil).UpdateMeetup), uid, dto)
}

// MockMeetupRepository is a mock of MeetupRepository interface.
type MockMeetupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMeetupRepositoryMockRecorder
}

// MockMeetupRepositoryMockRecorder is the mock recorder for MockMeetupRepository.
type MockMeetupRepositoryMockRecorder struct {
	mock *MockMeetupRepository
}

// NewMockMeetupRepository creates a new mock instance.
func NewMockMeetupRepository(ctrl *gomock.Controller) *MockMeetupRepository {
	mock := &MockMeetupRepository{ctrl: ctrl}
	mock.recorder = &MockMeetupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeetupRepository) EXPECT() *MockMeetupRepositoryMockRecorder {
	return m.recorder
}

// CreateMeetup mocks base method.
func (m_2 *MockMeetupRepository) CreateMeetup(m *domain.Meetup) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMeetup", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeetup indicates an expected call of CreateMeetup.
func (mr *MockMeetupRepositoryMockRecorder) CreateMeetup(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeetup", reflect.TypeOf((*MockMeetupRepository)(nil).CreateMeetup), m)
}

// DeleteMeetup mocks base method.
func (m *MockMeetupRepository) DeleteMeetup(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeetup", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeetup indicates an expected call of DeleteMeetup.
func (mr *MockMeetupRepositoryMockRecorder) DeleteMeetup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeetup", reflect.TypeOf((*MockMeetupRepository)(nil).DeleteMeetup), id)
}

// GetMeetupByID mocks base method.
func (m *MockMeetupRepository) GetMeetupByID(id string) (*domain.Meetup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeetupByID", id)
	ret0, _ := ret[0].(*domain.Meetup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeetupByID indicates an expected call of GetMeetupByID.
func (mr *MockMeetupRepositoryMockRecorder) GetMeetupByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeetupByID", reflect.TypeOf((*MockMeetupRepository)(nil).GetMeetupByID), id)
}

// UpdateMeetup mocks base method.
func (m_2 *MockMeetupRepository) UpdateMeetup(m *domain.Meetup) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMeetup", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeetup indicates an expected call of UpdateMeetup.
func (mr *MockMeetupRepositoryMockRecorder) UpdateMeetup(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeetup", reflect.TypeOf((*MockMeetupRepository)(nil).UpdateMeetup), m)
}
